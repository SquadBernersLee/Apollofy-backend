// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/postgre_client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Track {
  id             Int              @id @default(autoincrement())
  name           String
  artist         String
  url            String
  userId         Int
  genreId        Int
  albumId        Int
  thumbnail      String
  Genre          Genre            @relation(fields: [genreId], references: [id])
  Album          Album            @relation(fields: [albumId], references: [id])
  LikedTracks    LikedTracks[]
  PlaylistTracks PlaylistTracks[]
}

model User {
  id             Int              @id @default(autoincrement())
  rolId          Int
  first_name     String
  last_name      String
  email          String
  password       String
  city           String
  gender         String
  profilePicture String
  country        String
  dateOfBirth    DateTime
  genreId        Int
  popularity     Float
  Roles          Roles            @relation(fields: [rolId], references: [id])
  LikedTracks    LikedTracks[]
  Followers      Followers[]
  Followed       Followers[]      @relation("UserFollows")
  LikedAlbums    LikedAlbums[]
  FollowPlaylist FollowPlaylist[]
  Playlist       Playlist[]
  AlbumArtist    AlbumArtist[]
}

model Roles {
  id    Int    @id @default(autoincrement())
  name  String
  Users User[]
}

model Playlist {
  id             Int              @id @default(autoincrement())
  name           String
  imageUrl       String
  description    String
  primaryColor   String
  userId         Int
  User           User             @relation(fields: [userId], references: [id])
  PlaylistTracks PlaylistTracks[]
  FollowPlaylist FollowPlaylist[]
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  Tracks Track[]
}

model Album {
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  Tracks      Track[]
  AlbumArtist AlbumArtist[]
  LikedAlbums LikedAlbums[]
}

model AlbumArtist {
  id       Int   @id @default(autoincrement())
  artistId Int
  albumId  Int
  Artist   User  @relation(fields: [artistId], references: [id])
  Album    Album @relation(fields: [albumId], references: [id])
}

model PlaylistTracks {
  id         Int      @id @default(autoincrement())
  playlistId Int
  trackId    Int
  Playlist   Playlist @relation(fields: [playlistId], references: [id])
  Track      Track    @relation(fields: [trackId], references: [id])
}

model LikedTracks {
  id      Int   @id @default(autoincrement())
  UserId  Int
  trackId Int
  User    User  @relation(fields: [UserId], references: [id])
  Track   Track @relation(fields: [trackId], references: [id])
}

model FollowPlaylist {
  id         Int      @id @default(autoincrement())
  PlaylistId Int
  UserId     Int
  Playlist   Playlist @relation(fields: [PlaylistId], references: [id])
  User       User     @relation(fields: [UserId], references: [id])
}

model LikedAlbums {
  id      Int   @id @default(autoincrement())
  AlbumId Int
  UserId  Int
  Album   Album @relation(fields: [AlbumId], references: [id])
  User    User  @relation(fields: [UserId], references: [id])
}

model Followers {
  id             Int  @id @default(autoincrement())
  followerId     Int
  followedUserId Int
  Follower       User @relation(fields: [followerId], references: [id])
  Followed       User @relation(name: "UserFollows", fields: [followedUserId], references: [id])
}
